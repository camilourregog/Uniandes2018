
##Importación datos
datos<-read.csv("datos.csv",header=T,sep="\t",dec=",")
evalmensual<-read.csv("evalmensual.csv",header=T,sep=";",dec=",")
evaldiario<-read.csv("evaldiario.csv",header=T,sep=";",dec=",")

##Clasificación de base inicial (grilla diaria)
dgrid<-array(0,dim(datos)[1])
for(i in 1:length(dgrid)){
  dgrid[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<datos[i,2] & evaldiario$Latitud.Superior>datos[i,2]
                          & evaldiario$Longitud.Inferior<datos[i,3] & evaldiario$Longitud.Superior>datos[i,3]))==0,
                   NA,which(evaldiario$Latitud.Inferior<datos[i,2] & evaldiario$Latitud.Superior>datos[i,2]
                            & evaldiario$Longitud.Inferior<datos[i,3] & evaldiario$Longitud.Superior>datos[i,3]))
  
  print(paste0(i,"/",length(dgrid)," ","="," ",round(i/length(dgrid)*100,1),"%"))
}


##Clasificación de base inicial (grilla mensual)
mgrid<-array(0,dim(datos)[1])
for(i in 1:length(mgrid)){
  mgrid[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<datos[i,2] & evalmensual$Latitud.Superior>datos[i,2]
                                & evalmensual$Longitud.Inferior<datos[i,3] & evalmensual$Longitud.Superior>datos[i,3]))==0,
                   NA,which(evalmensual$Latitud.Inferior<datos[i,2] & evalmensual$Latitud.Superior>datos[i,2]
                            & evalmensual$Longitud.Inferior<datos[i,3] & evalmensual$Longitud.Superior>datos[i,3]))
  
  print(paste0(i,"/",length(mgrid)," ","="," ",round(i/length(mgrid)*100,1),"%"))
}

dgrid<-as.data.frame(dgrid)
mgrid<-as.data.frame(mgrid)
datos<-cbind(datos,dgrid,mgrid)


## Base por grilla y día (mensual) - variable respuesta: # de accidentes
pacman::p_load(plyr)
basetr<-count(datos,c('ID','Fecha','mgrid'))
Month_grid<-count(basetr[,c(1:3)],c('mgrid','Fecha'))
sum(na.omit(Month_grid$freq))
nomMG<-names(Month_grid)
nomMG[3]<-"accidentes"
colnames(Month_grid)<-nomMG
Month_grid$Fecha<-as.Date(as.character(Month_grid$Fecha),"%d/%m/%Y")

## Base por grilla y día (diaria) - variable respuesta: # de accidentes
pacman::p_load(plyr)
basetr<-count(datos,c('ID','Fecha','dgrid'))
Day_grid<-count(basetr[,c(1:3)],c('dgrid','Fecha'))
sum(na.omit(Day_grid$freq))
nomMG<-names(Day_grid)
nomMG[3]<-"accidentes"
colnames(Day_grid)<-nomMG
Day_grid$Fecha<-as.Date(as.character(Day_grid$Fecha),"%d/%m/%Y")

##Variables Estacionalidad
estacionalidad<-read.csv("estacionalidad.csv")
estacionalidad$Fecha<-as.Date(as.character(estacionalidad$Fecha),"%m/%d/%y")
Month_grid<-left_join(Month_grid,estacionalidad,by="Fecha")
Day_grid<-left_join(Day_grid,estacionalidad,by="Fecha")


###Variables de clima
pacman::p_load(rvest)

##Inicialization
climabog<-list()
climabog_data<-list()

for (i in 1:12){
  #Specifying the url for desired website to be scrapped
  url <- paste0('https://www.tutiempo.net/clima/',ifelse(i<10,paste0(0,i),i),'-2014/ws-802220.html')
  #Reading the HTML code from the website
  webpage <- read_html(url)
  
  #Using CSS selectors to scrap the stores names and addresses 
  climabog <- html_nodes(webpage,'.mensuales')
  
  
  #Converting the html data to text
  climabog_data[[i]]<- html_table(climabog)
  
}

pacman::p_load(stringi,data.table)
Res<-matrix(NA,396,33)

month<-list()
for(i in 1:12){
  for(j in 1:length(climabog_data[[i]])){
    if(is.null(climabog_data[[i]][[j]])==FALSE){
      Res <- data.frame(stri_list2matrix(climabog_data[[i]][[j]]))
    }}
  month[[i]]<-rbind(Res)
  Res<-list()
}

Res2<-matrix(NA,396,33)
clima<-as.data.frame(matrix(0,0,15))
colnames(clima)<-c('X1','X2','X3','X4','X5','X6','X7','X8','X9','X10','X11','X12',
                   'X13','X14','X15')
for(i in 1:length(month)){
  
  Res2 <- data.frame(stri_list2matrix(month[[i]]))
  
  
  clima<-rbind(clima,Res2)
}

colnames(clima)<-c('DiaMes','T_Med','T_Max','T_Min','Pres_Atm','Hum_Rel_Med','Prec_Tot',
                   'Vis_Med','Vel_Med_Viento','Vel_Max_S_Viento','Vel_Max_Raf_Viento',
                   'Ind_Lluvia','Ind_Nieve','Ind_Tormenta','Ind_Niebla')



delete<-which(stri_length(clima$DiaMes)>2|stri_length(clima$DiaMes)==0)
clima<-clima[-delete,]
for(i in 1:11){clima[,i]<-as.numeric(as.character(clima[,i]))}
clima$Ind_Lluvia<-ifelse(clima$Ind_Lluvia=="o",1,0)
clima$Ind_Nieve<-ifelse(clima$Ind_Nieve=="o",1,0)
clima$Ind_Tormenta<-ifelse(clima$Ind_Tormenta=="o",1,0)
clima$Ind_Niebla<-ifelse(clima$Ind_Niebla=="o",1,0)

clima$Fecha<-as.Date(seq(1,365,1),origin = '2013-12-31')



pacman::p_load(dplyr)
Month_grid<-left_join(Month_grid,clima,by="Fecha")
Day_grid<-left_join(Day_grid,clima,by="Fecha")

#write.csv(datos,"base.csv",row.names = F)


##base semaforos bogota para conteo semaforos por grillas mensual y diaria
semaforos<-read.csv("semaforos.csv")
nombres<-names(semaforos)
nombres[1]="Longitud"
nombres[2]="Latitud"
colnames(semaforos)<-nombres
semaforos$fechaimplementacion<-as.Date(semaforos$fechaimplementacion)
semaforos<-filter(semaforos,fechaimplementacion<'2015-01-01')

##Clasificación de base semaforos (grilla diaria)
dgridsem<-array(0,dim(semaforos)[1])
for(i in 1:length(dgridsem)){
  dgridsem[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<semaforos[i,2] & evaldiario$Latitud.Superior>semaforos[i,2]
                                   & evaldiario$Longitud.Inferior<semaforos[i,1] & evaldiario$Longitud.Superior>semaforos[i,1]))==0,
                      NA,which(evaldiario$Latitud.Inferior<semaforos[i,2] & evaldiario$Latitud.Superior>semaforos[i,2]
                               & evaldiario$Longitud.Inferior<semaforos[i,1] & evaldiario$Longitud.Superior>semaforos[i,1]))
  
  print(paste0(i,"/",length(dgridsem)," ","="," ",round(i/length(dgridsem)*100,1),"%"))
}


##Clasificación de base semaforos (grilla mensual)
mgridsem<-array(0,dim(semaforos)[1])
for(i in 1:length(mgridsem)){
  mgridsem[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<semaforos[i,2] & evalmensual$Latitud.Superior>semaforos[i,2]
                                   & evalmensual$Longitud.Inferior<semaforos[i,1] & evalmensual$Longitud.Superior>semaforos[i,1]))==0,
                      NA,which(evalmensual$Latitud.Inferior<semaforos[i,2] & evalmensual$Latitud.Superior>semaforos[i,2]
                               & evalmensual$Longitud.Inferior<semaforos[i,1] & evalmensual$Longitud.Superior>semaforos[i,1]))
  
  print(paste0(i,"/",length(mgridsem)," ","="," ",round(i/length(mgridsem)*100,1),"%"))
}

dgridsem<-as.data.frame(dgridsem)
mgridsem<-as.data.frame(mgridsem)
colnames(dgridsem)<-"dgrid"
colnames(mgridsem)<-"mgrid"
semaforos<-cbind(semaforos,dgridsem,mgridsem)
summary(semaforos)

pacman::p_load(dplyr)
dsem<-count(semaforos,'dgrid')
msem<-count(semaforos,'mgrid')

colnames(dsem)<-c('dgrid','semaf_count_d')
colnames(msem)<-c('mgrid','semaf_count_m')

#write.csv(dsem,"cont_sem_g_diaria.csv")
#write.csv(msem,"cont_sem_g_mensual.csv")

dsem<-dsem[-which(is.na(dsem$dgrid==T)),]
msem<-msem[-which(is.na(msem$mgrid==T)),]

Day_grid<-left_join(Day_grid,dsem,by="dgrid")
Month_grid<-left_join(Month_grid,msem,by="mgrid")


##conteo colegios
colofic<-read.csv("colegiosoficiales.csv", dec=",")
colofic<-colofic[,c(2,7,33,34)]
colpriv<-read.csv("colegiosprivados.csv", dec=",")
colpriv<-colpriv[,c(2,5,26,27)]
colegios<-rbind(colofic,colpriv)

##Clasificación de base colegios (grilla diaria)
dgridcol<-array(0,dim(colegios)[1])
for(i in 1:length(dgridcol)){
  dgridcol[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<colegios[i,4] & evaldiario$Latitud.Superior>colegios[i,4]
                                   & evaldiario$Longitud.Inferior<colegios[i,3] & evaldiario$Longitud.Superior>colegios[i,3]))==0,
                      NA,which(evaldiario$Latitud.Inferior<colegios[i,4] & evaldiario$Latitud.Superior>colegios[i,4]
                               & evaldiario$Longitud.Inferior<colegios[i,3] & evaldiario$Longitud.Superior>colegios[i,3]))
  
  print(paste0(i,"/",length(dgridcol)," ","="," ",round(i/length(dgridcol)*100,1),"%"))
}


##Clasificación de base colegios (grilla mensual)
mgridcol<-array(0,dim(colegios)[1])
for(i in 1:length(mgridcol)){
  mgridcol[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<colegios[i,4] & evalmensual$Latitud.Superior>colegios[i,4]
                                   & evalmensual$Longitud.Inferior<colegios[i,3] & evalmensual$Longitud.Superior>colegios[i,3]))==0,
                      NA,which(evalmensual$Latitud.Inferior<colegios[i,4] & evalmensual$Latitud.Superior>colegios[i,4]
                               & evalmensual$Longitud.Inferior<colegios[i,3] & evalmensual$Longitud.Superior>colegios[i,3]))
  
  print(paste0(i,"/",length(mgridcol)," ","="," ",round(i/length(mgridcol)*100,1),"%"))
}

dgridcol<-as.data.frame(dgridcol)
mgridcol<-as.data.frame(mgridcol)
colnames(dgridcol)<-"dgrid"
colnames(mgridcol)<-"mgrid"
colegios<-cbind(colegios,dgridcol,mgridcol)
summary(colegios)

pacman::p_load(dplyr)
dcolegios<-count(colegios,'dgrid')
mcolegios<-count(colegios,'mgrid')

colnames(dcolegios)<-c('dgrid','colegios_count_d')
colnames(mcolegios)<-c('mgrid','colegios_count_m')

dcolegios<-dcolegios[-which(is.na(dcolegios$dgrid==T)),]
mcolegios<-mcolegios[-which(is.na(mcolegios$mgrid==T)),]

Month_grid<-left_join(Month_grid,mcolegios,by="mgrid")
Day_grid<-left_join(Day_grid,dcolegios,by="dgrid")


##conteo paraderos sitp
paraderos<-read.csv("paraderositp.csv", dec=",")
paraderos<-paraderos[,c(2,5,6)]


##Clasificación de base paraderos (grilla diaria)
dgridpar<-array(0,dim(paraderos)[1])
for(i in 1:length(dgridpar)){
  dgridpar[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<paraderos[i,3] & evaldiario$Latitud.Superior>paraderos[i,3]
                                   & evaldiario$Longitud.Inferior<paraderos[i,2] & evaldiario$Longitud.Superior>paraderos[i,2]))==0,
                      NA,which(evaldiario$Latitud.Inferior<paraderos[i,3] & evaldiario$Latitud.Superior>paraderos[i,3]
                               & evaldiario$Longitud.Inferior<paraderos[i,2] & evaldiario$Longitud.Superior>paraderos[i,2]))
  
  print(paste0(i,"/",length(dgridpar)," ","="," ",round(i/length(dgridpar)*100,1),"%"))
}


##Clasificación de base paraderos (grilla mensual)
mgridpar<-array(0,dim(paraderos)[1])
for(i in 1:length(mgridpar)){
  mgridpar[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<paraderos[i,3] & evalmensual$Latitud.Superior>paraderos[i,3]
                                   & evalmensual$Longitud.Inferior<paraderos[i,2] & evalmensual$Longitud.Superior>paraderos[i,2]))==0,
                      NA,which(evalmensual$Latitud.Inferior<paraderos[i,3] & evalmensual$Latitud.Superior>paraderos[i,3]
                               & evalmensual$Longitud.Inferior<paraderos[i,2] & evalmensual$Longitud.Superior>paraderos[i,2]))
  
  print(paste0(i,"/",length(mgridpar)," ","="," ",round(i/length(mgridpar)*100,1),"%"))
}

dgridpar<-as.data.frame(dgridpar)
mgridpar<-as.data.frame(mgridpar)
colnames(dgridpar)<-"dgrid"
colnames(mgridpar)<-"mgrid"
paraderos<-cbind(paraderos,dgridpar,mgridpar)
summary(paraderos)

pacman::p_load(dplyr)
dparaderos<-count(paraderos,'dgrid')
mparaderos<-count(paraderos,'mgrid')

colnames(dparaderos)<-c('dgrid','paraderos_count_d')
colnames(mparaderos)<-c('mgrid','paraderos_count_m')

dparaderos<-dparaderos[-which(is.na(dparaderos$dgrid==T)),]
mparaderos<-mparaderos[-which(is.na(mparaderos$mgrid==T)),]

Month_grid<-left_join(Month_grid,mparaderos,by="mgrid")
Day_grid<-left_join(Day_grid,dparaderos,by="dgrid")



##conteo parques
parques<-read.csv("parques.csv", dec=",")
parques<-parques[,c(2,12,13)]


##Clasificación de base parques (grilla diaria)
dgridparq<-array(0,dim(parques)[1])
for(i in 1:length(dgridparq)){
  dgridparq[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<parques[i,3] & evaldiario$Latitud.Superior>parques[i,3]
                                   & evaldiario$Longitud.Inferior<parques[i,2] & evaldiario$Longitud.Superior>parques[i,2]))==0,
                      NA,which(evaldiario$Latitud.Inferior<parques[i,3] & evaldiario$Latitud.Superior>parques[i,3]
                               & evaldiario$Longitud.Inferior<parques[i,2] & evaldiario$Longitud.Superior>parques[i,2]))
  
  print(paste0(i,"/",length(dgridparq)," ","="," ",round(i/length(dgridparq)*100,1),"%"))
}


##Clasificación de base parques (grilla mensual)
mgridparq<-array(0,dim(parques)[1])
for(i in 1:length(mgridparq)){
  mgridparq[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<parques[i,3] & evalmensual$Latitud.Superior>parques[i,3]
                                   & evalmensual$Longitud.Inferior<parques[i,2] & evalmensual$Longitud.Superior>parques[i,2]))==0,
                      NA,which(evalmensual$Latitud.Inferior<parques[i,3] & evalmensual$Latitud.Superior>parques[i,3]
                               & evalmensual$Longitud.Inferior<parques[i,2] & evalmensual$Longitud.Superior>parques[i,2]))
  
  print(paste0(i,"/",length(mgridparq)," ","="," ",round(i/length(mgridparq)*100,1),"%"))
}

dgridparq<-as.data.frame(dgridparq)
mgridparq<-as.data.frame(mgridparq)
colnames(dgridparq)<-"dgrid"
colnames(mgridparq)<-"mgrid"
parques<-cbind(parques,dgridparq,mgridparq)
summary(parques)

pacman::p_load(dplyr)
dparques<-count(parques,'dgrid')
mparques<-count(parques,'mgrid')

colnames(dparques)<-c('dgrid','parques_count_d')
colnames(mparques)<-c('mgrid','parques_count_m')

dparques<-dparques[-which(is.na(dparques$dgrid==T)),]
mparques<-mparques[-which(is.na(mparques$mgrid==T)),]

Month_grid<-left_join(Month_grid,mparques,by="mgrid")
Day_grid<-left_join(Day_grid,dparques,by="dgrid")



##conteo estaciones
estaciones<-read.csv("estaciones.csv", dec=",")
estaciones<-estaciones[,c(2,8,9)]


##Clasificación de base estaciones (grilla diaria)
dgridest<-array(0,dim(estaciones)[1])
for(i in 1:length(dgridest)){
  dgridest[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<estaciones[i,3] & evaldiario$Latitud.Superior>estaciones[i,3]
                                    & evaldiario$Longitud.Inferior<estaciones[i,2] & evaldiario$Longitud.Superior>estaciones[i,2]))==0,
                       NA,which(evaldiario$Latitud.Inferior<estaciones[i,3] & evaldiario$Latitud.Superior>estaciones[i,3]
                                & evaldiario$Longitud.Inferior<estaciones[i,2] & evaldiario$Longitud.Superior>estaciones[i,2]))
  
  print(paste0(i,"/",length(dgridest)," ","="," ",round(i/length(dgridest)*100,1),"%"))
}


##Clasificación de base estaciones (grilla mensual)
mgridest<-array(0,dim(estaciones)[1])
for(i in 1:length(mgridest)){
  mgridest[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<estaciones[i,3] & evalmensual$Latitud.Superior>estaciones[i,3]
                                    & evalmensual$Longitud.Inferior<estaciones[i,2] & evalmensual$Longitud.Superior>estaciones[i,2]))==0,
                       NA,which(evalmensual$Latitud.Inferior<estaciones[i,3] & evalmensual$Latitud.Superior>estaciones[i,3]
                                & evalmensual$Longitud.Inferior<estaciones[i,2] & evalmensual$Longitud.Superior>estaciones[i,2]))
  
  print(paste0(i,"/",length(mgridest)," ","="," ",round(i/length(mgridest)*100,1),"%"))
}

dgridest<-as.data.frame(dgridest)
mgridest<-as.data.frame(mgridest)
colnames(dgridest)<-"dgrid"
colnames(mgridest)<-"mgrid"
estaciones<-cbind(estaciones,dgridest,mgridest)
summary(estaciones)

pacman::p_load(dplyr)
destaciones<-count(estaciones,'dgrid')
mestaciones<-count(estaciones,'mgrid')

colnames(destaciones)<-c('dgrid','estaciones_count_d')
colnames(mestaciones)<-c('mgrid','estaciones_count_m')

destaciones<-destaciones[-which(is.na(destaciones$dgrid==T)),]
mestaciones<-mestaciones[-which(is.na(mestaciones$mgrid==T)),]

Month_grid<-left_join(Month_grid,mestaciones,by="mgrid")
Day_grid<-left_join(Day_grid,destaciones,by="dgrid")

Month_grid<-Month_grid[,-11]
Day_grid<-Day_grid[,-11]

Month_grid$estaciones_count_m<-ifelse(is.na(Month_grid$estaciones_count_m)==T,
                                      0,Month_grid$estaciones_count_m)

Day_grid$estaciones_count_d<-ifelse(is.na(Day_grid$estaciones_count_d)==T,
                                      0,Day_grid$estaciones_count_d)

Month_grid$Vel_Max_Raf_Viento<-ifelse(is.na(Month_grid$Vel_Max_Raf_Viento)==T,
                                      0,Month_grid$Vel_Max_Raf_Viento)

Day_grid$Vel_Max_Raf_Viento<-ifelse(is.na(Day_grid$Vel_Max_Raf_Viento)==T,
                                    0,Day_grid$Vel_Max_Raf_Viento)

##conteo vias principales
load("~/OneDrive - Universidad de Los Andes/DataSciencePr/R/Competencia Analytics/CoordenadasPricipales.RData")

## Converting list to dataframe
pacman::p_load(stringi,data.table)
Res<-matrix(NA)

via<-list()
for(i in 1:117){
  for(j in 1:length(Coord_Vias[[i]])){
    if(is.null(Coord_Vias[[i]][[j]])==FALSE){
      Res <- data.frame(Coord_Vias[[i]][[j]])
    }}
  via[[i]]<-rbind(Res)
  Res<-list()
}

for(i in 1:117){
 via[[i]][['NumVia']]=i 
}
vias<-rbindlist(via)
vias<-as.data.frame(vias)


##Clasificación de base vias principales (grilla diaria)
dgridviaprinc<-array(0,dim(vias)[1])
for(i in 1:length(dgridviaprinc)){
  dgridviaprinc[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<vias[i,2] & evaldiario$Latitud.Superior>vias[i,2]
                                    & evaldiario$Longitud.Inferior<vias[i,1] & evaldiario$Longitud.Superior>vias[i,1]))==0,
                       NA,which(evaldiario$Latitud.Inferior<vias[i,2] & evaldiario$Latitud.Superior>vias[i,2]
                                & evaldiario$Longitud.Inferior<vias[i,1] & evaldiario$Longitud.Superior>vias[i,1]))
  
  print(paste0(i,"/",length(dgridviaprinc)," ","="," ",round(i/length(dgridviaprinc)*100,1),"%"))
}


##Clasificación de base vias principales (grilla mensual)
mgridviaprinc<-array(0,dim(vias)[1])
for(i in 1:length(mgridviaprinc)){
  mgridviaprinc[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<vias[i,2] & evalmensual$Latitud.Superior>vias[i,2]
                                    & evalmensual$Longitud.Inferior<vias[i,1] & evalmensual$Longitud.Superior>vias[i,1]))==0,
                       NA,which(evalmensual$Latitud.Inferior<vias[i,2] & evalmensual$Latitud.Superior>vias[i,2]
                                & evalmensual$Longitud.Inferior<vias[i,1] & evalmensual$Longitud.Superior>vias[i,1]))
  
  print(paste0(i,"/",length(mgridviaprinc)," ","="," ",round(i/length(mgridviaprinc)*100,1),"%"))
}

dgridviaprinc<-as.data.frame(dgridviaprinc)
mgridviaprinc<-as.data.frame(mgridviaprinc)
colnames(dgridviaprinc)<-"dgrid"
colnames(mgridviaprinc)<-"mgrid"
vias<-cbind(vias,dgridviaprinc,mgridviaprinc)
summary(vias)

dviaprinc<-count(vias,dgrid~NumVia)
mviaprinc<-count(vias,mgrid~NumVia)
dviaprincc<-count(dviaprinc[,-3],"dgrid")
mviaprincc<-count(mviaprinc[,-3],"mgrid")

colnames(dviaprincc)<-c('dgrid','viasprincipales_count_d')
colnames(mviaprincc)<-c('mgrid','viasprincipales_count_m')

dviaprincc<-dviaprincc[-which(is.na(dviaprincc$dgrid==T)),]
mviaprincc<-mviaprincc[-which(is.na(mviaprincc$mgrid==T)),]

dviaprincc$dgrid<-as.integer(as.character(dviaprincc$dgrid))
mviaprincc$mgrid<-as.integer(as.character(mviaprincc$mgrid))


Month_grid<-left_join(Month_grid,mviaprincc,by="mgrid")
Day_grid<-left_join(Day_grid,dviaprincc,by="dgrid")


##conteo vias secundarias
load("~/OneDrive - Universidad de Los Andes/DataSciencePr/R/Competencia Analytics/CoordenadasSecundarias.RData")

## Converting list to dataframe
pacman::p_load(stringi,data.table)
Res<-matrix(NA)

via<-list()
for(i in 1:126713){
  for(j in 1:length(Coord_Vias[[i]])){
    if(is.null(Coord_Vias[[i]][[j]])==FALSE){
      Res <- data.frame(Coord_Vias[[i]][[j]])
    }}
  via[[i]]<-rbind(Res)
  Res<-list()
}

for(i in 1:126713){
  via[[i]][['NumVia']]=i 
}
viasec<-rbindlist(via)
viasec<-as.data.frame(viasec)

##Clasificación de base vias principales (grilla diaria)
dgridviasec<-array(0,dim(viasec)[1])
for(i in 1:length(dgridviasec)){
  dgridviasec[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<viasec[i,2] & evaldiario$Latitud.Superior>viasec[i,2]
                                        & evaldiario$Longitud.Inferior<viasec[i,1] & evaldiario$Longitud.Superior>viasec[i,1]))==0,
                           NA,which(evaldiario$Latitud.Inferior<viasec[i,2] & evaldiario$Latitud.Superior>viasec[i,2]
                                    & evaldiario$Longitud.Inferior<viasec[i,1] & evaldiario$Longitud.Superior>viasec[i,1]))
  
  print(paste0(i,"/",length(dgridviasec)," ","="," ",round(i/length(dgridviasec)*100,1),"%"))
}


##Clasificación de base vias secundarias (grilla mensual)
mgridviasec<-array(0,dim(viasec)[1])
for(i in 1:length(mgridviasec)){
  mgridviasec[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<viasec[i,2] & evalmensual$Latitud.Superior>viasec[i,2]
                                        & evalmensual$Longitud.Inferior<viasec[i,1] & evalmensual$Longitud.Superior>viasec[i,1]))==0,
                           NA,which(evalmensual$Latitud.Inferior<viasec[i,2] & evalmensual$Latitud.Superior>viasec[i,2]
                                    & evalmensual$Longitud.Inferior<viasec[i,1] & evalmensual$Longitud.Superior>viasec[i,1]))
  
  print(paste0(i,"/",length(mgridviasec)," ","="," ",round(i/length(mgridviasec)*100,1),"%"))
}

dgridviasec<-as.data.frame(dgridviasec)
mgridviasec<-as.data.frame(mgridviasec)
colnames(dgridviasec)<-"dgrid"
colnames(mgridviasec)<-"mgrid"
viasec<-cbind(viasec,dgridviasec,mgridviasec)
summary(viasec)

dviasec<-count(viasec,dgrid~NumVia)
mviasec<-count(viasec,mgrid~NumVia)
dviasecc<-count(dviasec[,-3],"dgrid")
mviasecc<-count(mviasec[,-3],"mgrid")

colnames(dviasecc)<-c('dgrid','viassecudarias_count_d')
colnames(mviasecc)<-c('mgrid','viassecundarias_count_m')

dviasecc<-dviasecc[-which(is.na(dviasecc$dgrid==T)),]
mviasecc<-mviasecc[-which(is.na(mviasecc$mgrid==T)),]
dviasecc$dgrid<-as.integer(as.character(dviasecc$dgrid))
mviasecc$mgrid<-as.integer(as.character(mviasecc$mgrid))

Month_grid<-left_join(Month_grid,mviasecc,by="mgrid")
Day_grid<-left_join(Day_grid,dviasecc,by="dgrid")


####Info manzanas
manzanas<-read.csv("manzanas.csv")

##Clasificación de base vias manzanas (grilla diaria)
dgridmanzanas<-array(0,dim(manzanas)[1])
for(i in 1:length(dgridmanzanas)){
  dgridmanzanas[i]<-ifelse(length(which(evaldiario$Latitud.Inferior<manzanas[i,7] & evaldiario$Latitud.Superior>manzanas[i,7]
                                      & evaldiario$Longitud.Inferior<manzanas[i,6] & evaldiario$Longitud.Superior>manzanas[i,6]))==0,
                         NA,which(evaldiario$Latitud.Inferior<manzanas[i,7] & evaldiario$Latitud.Superior>manzanas[i,7]
                                  & evaldiario$Longitud.Inferior<manzanas[i,6] & evaldiario$Longitud.Superior>manzanas[i,6]))
  
  print(paste0(i,"/",length(dgridmanzanas)," ","="," ",round(i/length(dgridmanzanas)*100,1),"%"))
}


##Clasificación de base manzanas (grilla mensual)
mgridmanzanas<-array(0,dim(manzanas)[1])
for(i in 1:length(mgridmanzanas)){
  mgridmanzanas[i]<-ifelse(length(which(evalmensual$Latitud.Inferior<manzanas[i,7] & evalmensual$Latitud.Superior>manzanas[i,7]
                                      & evalmensual$Longitud.Inferior<manzanas[i,6] & evalmensual$Longitud.Superior>manzanas[i,6]))==0,
                         NA,which(evalmensual$Latitud.Inferior<manzanas[i,7] & evalmensual$Latitud.Superior>manzanas[i,7]
                                  & evalmensual$Longitud.Inferior<manzanas[i,6] & evalmensual$Longitud.Superior>manzanas[i,6]))
  
  print(paste0(i,"/",length(mgridmanzanas)," ","="," ",round(i/length(mgridmanzanas)*100,1),"%"))
}

dgridmanzanas<-as.data.frame(dgridmanzanas)
mgridmanzanas<-as.data.frame(mgridmanzanas)
colnames(dgridmanzanas)<-"dgrid"
colnames(mgridmanzanas)<-"mgrid"
manzanas<-cbind(manzanas,dgridmanzanas,mgridmanzanas)
summary(manzanas)

dmanzanas<-aggregate(.~dgrid,data=manzanas,sum)
mmanzanas<-aggregate(.~mgrid,data=manzanas,sum)
dmanzanas<-dmanzanas[,c(1:6)]
mmanzanas<-mmanzanas[,c(1:6)]

colnames(dmanzanas)<-c('dgrid','viviendas_count_d','hogares_count_d','personas_count_d',
                       'comercial_count_d','lotes_count_d')
colnames(mmanzanas)<-c('mgrid','viviendas_count_m','hogares_count_m','personas_count_m',
                       'comercial_count_m','lotes_count_m')

dmanzanas<-dmanzanas[-which(is.na(dmanzanas$dgrid==T)),]
mmanzanas<-mmanzanas[-which(is.na(mmanzanas$mgrid==T)),]
dmanzanas$dgrid<-as.integer(as.character(dmanzanas$dgrid))
mmanzanas$mgrid<-as.integer(as.character(mmanzanas$mgrid))

Month_grid<-left_join(Month_grid,mmanzanas,by="mgrid")
Day_grid<-left_join(Day_grid,dmanzanas,by="dgrid")

###Variable pico y placa
Day_grid$ParImpar<-Day_grid$DiaMes %% 2

Day_grid$PicoYPlaca<-ifelse(Day_grid$Clas.Final=="Sabado" | Day_grid$Clas.Final=="FestivoEntreSemana" |
Day_grid$Clas.Final=="DomingoFestivo","Todos",ifelse(Day_grid$ParImpar==0,"SoloImpares","SoloPares"))
                                                                                       
Day_grid[which(Day_grid$Fecha>="2014-12-26"),34]="Todos"
Day_grid[which(Day_grid$Fecha<="2014-01-05"),34]="Todos"
Day_grid[which(Day_grid$Fecha=="2014-02-06"),5]="Bajo Trafico"
Day_grid<-Day_grid[,-33]
Day_grid$PicoYPlaca<-as.factor(Day_grid$PicoYPlaca)


Month_grid$ParImpar<-Month_grid$DiaMes %% 2

Month_grid$PicoYPlaca<-ifelse(Month_grid$Clas.Final=="Sabado" | Month_grid$Clas.Final=="FestivoEntreSemana" |
                                Month_grid$Clas.Final=="DomingoFestivo","Todos",ifelse(Month_grid$ParImpar==0,"SoloImpares","SoloPares"))

Month_grid[which(Month_grid$Fecha>="2014-12-26"),34]="Todos"
Month_grid[which(Month_grid$Fecha<="2014-01-05"),34]="Todos"
Month_grid[which(Month_grid$Fecha=="2014-02-06"),5]="Bajo Trafico"
Month_grid<-Month_grid[,-33]
Month_grid$PicoYPlaca<-as.factor(Month_grid$PicoYPlaca)



###Expo bases
write.csv(Day_grid,"basediario.csv",row.names = F)
write.csv(Month_grid,"basemensual.csv",row.names = F)


##Agregar información de conteos de grillas en bases de evaluación
datosdiario<-read.csv("basediario.csv",header=T,sep=",",dec=",")
datosmensual<-read.csv("basemensual.csv",header=T,sep=",",dec=",")
evalmensual<-read.csv("evalmensual.csv",header=T,sep=";",dec=",")
evaldiario<-read.csv("evaldiario.csv",header=T,sep=";",dec=",")


datosdiario<-datosdiario[,c(1,21:32)]
datosmensual<-datosmensual[,c(1,21:32)]

library(dplyr)
evaldiario1<-left_join(evaldiario,datosdiario,"dgrid")
evaldiario1<-unique(evaldiario1)

evalmensual1<-left_join(evalmensual,datosmensual,"mgrid")
evalmensual1<-unique(evalmensual1)


write.csv(evaldiario1,"evaldiariocount.csv",row.names = F)
write.csv(evalmensual1,"evalmensualcount.csv",row.names = F)
#####

datos<-read.csv("basediario.csv")
Day_grid<-datos
Day_grid$Fecha<-as.Date(as.character(Day_grid$Fecha),'%Y-%m-%d')
Day_grid<-Day_grid[-which(Day_grid$dgrid==2 | Day_grid$dgrid==54),]
Day_grid$dgrid<-as.factor(as.character(Day_grid$dgrid))
for(i in 17:20){Day_grid[,i]<-as.factor(as.character(Day_grid[,i]))}
Day_grid$Eventos.Especiales<-ifelse(Day_grid$Eventos.Especiales=="No","No","Si")

Day_grid$Eventos.Especiales<-as.factor(as.character(Day_grid$Eventos.Especiales))

datos<-Day_grid


datos<-read.csv("basemensual.csv")
Month_grid<-datos
Month_grid$Fecha<-as.Date(as.character(Month_grid$Fecha),'%Y-%m-%d')
Month_grid$mgrid<-as.factor(as.character(Month_grid$mgrid))
for(i in 17:20){Month_grid[,i]<-as.factor(as.character(Month_grid[,i]))}
Month_grid$Eventos.Especiales<-ifelse(Month_grid$Eventos.Especiales=="No","No","Si")

Month_grid$Eventos.Especiales<-as.factor(as.character(Month_grid$Eventos.Especiales))
datos<-Month_grid
###Correlacion de variables (filtering)
# pacman::p_load(caret)
# 
# nearZeroVar(datos[,c(2,6:10)])
# correlations <- cor(datos[,c(2,6:10)])
# dim(correlations)
# correlations[1:4, 1:4]
# pacman::p_load(corrplot)
# par(mfrow=c(1,1))
# corrplot(correlations, order = "hclust",tl.cex = 0.55) #Grafico de correlaciones ordenado por clustering jerarquico
# 
# ###Dependencias lineales
# comboInfo <- findLinearCombos(datos[,c(2,6:10)])
# comboInfo
# names(datos)[comboInfo$remove]
# datos<-datos[,-comboInfo$remove] #remover dependencias lineales restantes
# testdata<-testdata[,-comboInfo$remove]

# 
# 

#Muestra de entrenamiento y de validacion



#Muestreo Estratificado

# pacman::p_load(sampling,dplyr)
# datos=filter(datos,(dgrid !=2 | dgrid!=54))
# table(datos$dgrid)
# evaldiario3=filter(datos,(dgrid ==2 | dgrid==54))
# 
# mh=c(round(cbind(table(evaldiario2$dgrid))*0.15))
# mh=mh[which(mh!=0)]
# evaldiario2$dgrid<-factor(evaldiario2$dgrid)
# 
# Estratos <- strata(evaldiario2, stratanames = c("dgrid"), size = mh, method = "srswor" )
# datos.muestreado <- getdata(datos, Estratos )
# datos_Muestra=dplyr::select(datos.muestreado,c(names(datos)))
# 
# Data_Test=rbind(datos_Muestra,evaldiario3)
# table(Data_Test$dgrid)
# 
# Data_Train=setdiff(datos, Data_Test)
# Data_Train=rbind(Data_Train,evaldiario3)
# table(Data_Train$dgrid)
# 
# train=Data_Train
# test=Data_Test
# 
# rm(evaldiario2,evaldiario3,Data_Test,Data_Train,datos_Muestra,datos.muestreado)

datos=na.omit(datos)
datos=na.omit(Day_grid[,c(3,4:6)]) #Sòlo Estacionales Rsquared: 0.02127
datos=na.omit(Day_grid[,c(3,8:20)]) #Solo clima Rsquared: 0.002201
datos=na.omit(Day_grid[,c(3,21:32)]) #Solo conteos grilla RSquared: 0.1826
datos=na.omit(Day_grid[,c(1,3)]) #Solo grilla RSquared: 0.3534

datos=na.omit(Day_grid[,c(1,3:6)]) #grilla+estacionalidad RSquared: 0.3867
datos=na.omit(Day_grid[,c(3:6,21:32)]) #estacionalidad+conteos RSquared: 0.2801
datos=na.omit(Day_grid[,c(1,3:6,21:32)]) #grilla+estacionalidad RSquared: 0.3867
datos=na.omit(Day_grid[,c(1,3:6,8:32)]) #grilla+interaccion clima vs conteo RSquared: 0.3867

datos=na.omit(Month_grid[,c(3,4:6)]) #Sòlo Estacionales Rsquared: 0.006763
datos=na.omit(Month_grid[,c(3,8:20)]) #Solo clima Rsquared: 4.594e-05
datos=na.omit(Month_grid[,c(3,21:32)]) #Solo conteos grilla RSquared: 0.05118
datos=na.omit(Month_grid[,c(1,3)]) #Solo grilla RSquared: 0.01138
datos=na.omit(Month_grid[,c(1,3:6)]) #grilla+estacionalidad RSquared: 0.02039
datos=na.omit(Month_grid[,c(3:6,21:32)]) #estacionalidad+conteos RSquared: 0.0603
datos=na.omit(Month_grid[,c(1,3:6,8:32)]) #grilla+interaccion clima vs conteo RSquared: 0.3867
#######
set.seed(2018)
n1=sample(seq(1:dim(datos)[1]),dim(datos)[1]-2000)
train=datos[n1,]
test=datos[-n1,]

varestacionales<-Day_grid[,4:6]
varclima<-Day_grid[,8:20]
varconteos<-Day_grid[,21:32]

##lm

mod1<-lm(accidentes~dgrid+Clas.Final+TemporadaTrafico+Eventos.Especiales+PicoYPlaca+
           T_Med*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)+
           Vel_Max_S_Viento*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)+
           Ind_Tormenta*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
           -semaf_count_d-viasprincipales_count_d-
           viassecudarias_count_d,train)
summary(mod1)
pred_lm=predict(mod1,test)

rmselm=sqrt(mean((round(pred_lm,0)-test$accidentes)^2))
rmselm


##glm

mod1<-glm(accidentes~dgrid+Clas.Final+TemporadaTrafico+Eventos.Especiales+PicoYPlaca+
            T_Med*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)+
            Vel_Max_S_Viento*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)+
            Ind_Tormenta*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)-
            semaf_count_d-viasprincipales_count_d-viassecudarias_count_d,train,family = 'poisson')
summary(mod1)

pred_lm=predict(mod1,test)

rmselm=sqrt(mean((round(pred_lm,0)-test$accidentes)^2))
rmselm



#random forest

pacman::p_load(randomForest)

rf.mash=randomForest(accidentes~dgrid+Clas.Final+TemporadaTrafico+Eventos.Especiales+PicoYPlaca+
                       +T_Med*Hum_Rel_Med*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
                       +Vel_Max_S_Viento*Ind_Lluvia*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
                       +Ind_Tormenta*Vis_Med*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
                       -semaf_count_d-viasprincipales_count_d-viassecudarias_count_d,train,mtry=2)

rf.mash

imp_rf=importance(rf.mash)
imp_rf
varImpPlot(rf.mash)

pred_rf=predict(rf.mash,test)

rmserf=sqrt(mean((round(pred_rf)-test$accidentes)^2))
rmserf

library(gbm)
mod<-gbm(accidentes~semaf_count_d+comercial_count_d
         +viasprincipales_count_d+Ind_Lluvia+dgrid+dgrid*Clas.Final+
           dgrid*TemporadaTrafico+PicoYPlaca+Clas.Final+TemporadaTrafico+
           Eventos.Especiales+Ind_Tormenta,
         data=train,distribution="gaussian",n.trees=5000,
         interaction.depth=6,shrinkage=0.001)
summary(mod)
pred<-predict(mod,newdata=test,n.trees = 5000,type="response")
rmse<-sqrt(mean((round(pred)-test$accidentes)^2))
rmse

#gbm

ntrees<-seq(100,5000,500)
shrin<-seq(0.01,5,0.5)
cvmseboo<-matrix(0,length(ntrees),length(shrin))
for (i in 1:length(ntrees)){
  
  for(j in 1:length(shrin)){
    m2=gbm(accidentes~dgrid+Clas.Final+TemporadaTrafico+Eventos.Especiales+PicoYPlaca+
           +T_Med*Hum_Rel_Med*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
           +Vel_Max_S_Viento*Ind_Lluvia*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
           +Ind_Tormenta*Vis_Med*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
           -semaf_count_d-viasprincipales_count_d-viassecudarias_count_d,data=train,n.trees=ntrees[i],shrinkage=shrin[j],interaction.depth=4,distribution="gaussian")
    
    predict_gboost=predict(m2,newdata=test,n.trees=ntrees[i])
    
    rmse_gboost=sqrt(mean((round(predict_gboost)-test$accidentes)^2))
    cvmseboo[i,j]<-rmse_gboost
    print(paste0("j=",j))
  }
  print(paste0("i=",i))
}
a=which.min(cvmseboo)
cvmseboo[a]
param=function(a){ ##parametros de calibracion minimo MSE Test CV
  lambdamse=ceiling(a/length(ntrees))
  ntreesmse=a%%length(ntrees)
  ntreesmse=ifelse(ntreesmse==0,length(shrin),ntreesmse)
  return(c("ntrees"=round(ntrees[ntreesmse],0),"lambda"=shrin[lambdamse]))
}
param(a)

m2=gbm(accidentes~dgrid+Clas.Final+TemporadaTrafico+Eventos.Especiales
       +T_Med*Hum_Rel_Med*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
       +Vel_Max_S_Viento*Ind_Lluvia*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
       +Ind_Tormenta*Vis_Med*(semaf_count_d+viasprincipales_count_d+viassecudarias_count_d)
       -semaf_count_d-viasprincipales_count_d-viassecudarias_count_d,data=train,n.trees=4100,shrinkage=0.01,interaction.depth=4,distribution="gaussian")

predict_gboost=predict(m2,newdata=test,n.trees=4100,type="response")

rmse_gboost=sqrt(mean((round(predict_gboost)-test$accidentes)^2))
rmse_gboost

predboostgbm<-predict(m2,testdata,n.trees = 201)


#5. Ahora con penalizacion en norma 1 (LASSO)

pacman::p_load(glmnet)

par(mfrow=c(1,1))
Xtestdata<-as.matrix(testdata)
X=model.matrix(accidentes~.,train)[,-1]
Xtest=model.matrix(accidentes~.,test)[,-1]

y=train$accidentes
ytest=test$accidentes

mod1=glmnet(X,y,alpha=1,family='gaussian')
plot(mod1)


cvmod1=cv.glmnet(X,y,alpha=1)
cvmod1$lambda.min
plot(cvmod1)

mod_pen1=glmnet(X,y,alpha=1,lambda=cvmod1$lambda.min,family='gaussian')
coef(mod_pen1)

predp1=predict(mod_pen1,Xtest)
rmsep1=sqrt(mean((ytest-round(predp1,0))^2))
rmsep1
mod_pen1

